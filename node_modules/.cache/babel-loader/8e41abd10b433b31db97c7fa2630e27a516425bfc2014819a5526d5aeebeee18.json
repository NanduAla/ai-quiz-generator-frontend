{"ast":null,"code":"// frontend/src/services/api.js\nconst BACKEND_URL = process.env.REACT_APP_BACKEND_URL;\n\n/**\r\n * Calls the FastAPI endpoint to generate a new quiz from a Wikipedia URL.\r\n */\nexport async function generateQuiz(url) {\n  const response = await fetch(`${BACKEND_URL}/generate_quiz`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      url\n    })\n  });\n  if (!response.ok) {\n    const errorData = await response.json();\n    throw new Error(errorData.detail || `HTTP error! Status: ${response.status}`);\n  }\n  return response.json();\n}\n\n/**\r\n * Calls the FastAPI endpoint to get the list of saved quizzes.\r\n */\nexport async function getQuizHistory() {\n  const response = await fetch(`${BACKEND_URL}/history`);\n  if (!response.ok) {\n    throw new Error(`Failed to fetch history: ${response.status}`);\n  }\n  return response.json();\n}\n\n/**\r\n * Calls the FastAPI endpoint to fetch a single quiz by ID.\r\n */\nexport async function getSingleQuiz(quizId) {\n  const response = await fetch(`${BACKEND_URL}/quiz/${quizId}`);\n  if (!response.ok) {\n    throw new Error(`Failed to fetch quiz ID ${quizId}.`);\n  }\n  return response.json();\n}","map":{"version":3,"names":["BACKEND_URL","process","env","REACT_APP_BACKEND_URL","generateQuiz","url","response","fetch","method","headers","body","JSON","stringify","ok","errorData","json","Error","detail","status","getQuizHistory","getSingleQuiz","quizId"],"sources":["C:/Users/nandu/ai-quiz-generator/frontend/src/services/api.js"],"sourcesContent":["// frontend/src/services/api.js\r\nconst BACKEND_URL = process.env.REACT_APP_BACKEND_URL;\r\n\r\n\r\n/**\r\n * Calls the FastAPI endpoint to generate a new quiz from a Wikipedia URL.\r\n */\r\nexport async function generateQuiz(url) {\r\n  const response = await fetch(`${BACKEND_URL}/generate_quiz`, {\r\n    method: 'POST',\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n    },\r\n    body: JSON.stringify({ url }),\r\n  });\r\n\r\n  if (!response.ok) {\r\n    const errorData = await response.json();\r\n    throw new Error(errorData.detail || `HTTP error! Status: ${response.status}`);\r\n  }\r\n\r\n  return response.json();\r\n}\r\n\r\n/**\r\n * Calls the FastAPI endpoint to get the list of saved quizzes.\r\n */\r\nexport async function getQuizHistory() {\r\n  const response = await fetch(`${BACKEND_URL}/history`);\r\n\r\n  if (!response.ok) {\r\n    throw new Error(`Failed to fetch history: ${response.status}`);\r\n  }\r\n\r\n  return response.json();\r\n}\r\n\r\n/**\r\n * Calls the FastAPI endpoint to fetch a single quiz by ID.\r\n */\r\nexport async function getSingleQuiz(quizId) {\r\n  const response = await fetch(`${BACKEND_URL}/quiz/${quizId}`);\r\n\r\n  if (!response.ok) {\r\n    throw new Error(`Failed to fetch quiz ID ${quizId}.`);\r\n  }\r\n\r\n  return response.json();\r\n}"],"mappings":"AAAA;AACA,MAAMA,WAAW,GAAGC,OAAO,CAACC,GAAG,CAACC,qBAAqB;;AAGrD;AACA;AACA;AACA,OAAO,eAAeC,YAAYA,CAACC,GAAG,EAAE;EACtC,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGP,WAAW,gBAAgB,EAAE;IAC3DQ,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACP,cAAc,EAAE;IAClB,CAAC;IACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;MAAEP;IAAI,CAAC;EAC9B,CAAC,CAAC;EAEF,IAAI,CAACC,QAAQ,CAACO,EAAE,EAAE;IAChB,MAAMC,SAAS,GAAG,MAAMR,QAAQ,CAACS,IAAI,CAAC,CAAC;IACvC,MAAM,IAAIC,KAAK,CAACF,SAAS,CAACG,MAAM,IAAI,uBAAuBX,QAAQ,CAACY,MAAM,EAAE,CAAC;EAC/E;EAEA,OAAOZ,QAAQ,CAACS,IAAI,CAAC,CAAC;AACxB;;AAEA;AACA;AACA;AACA,OAAO,eAAeI,cAAcA,CAAA,EAAG;EACrC,MAAMb,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGP,WAAW,UAAU,CAAC;EAEtD,IAAI,CAACM,QAAQ,CAACO,EAAE,EAAE;IAChB,MAAM,IAAIG,KAAK,CAAC,4BAA4BV,QAAQ,CAACY,MAAM,EAAE,CAAC;EAChE;EAEA,OAAOZ,QAAQ,CAACS,IAAI,CAAC,CAAC;AACxB;;AAEA;AACA;AACA;AACA,OAAO,eAAeK,aAAaA,CAACC,MAAM,EAAE;EAC1C,MAAMf,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGP,WAAW,SAASqB,MAAM,EAAE,CAAC;EAE7D,IAAI,CAACf,QAAQ,CAACO,EAAE,EAAE;IAChB,MAAM,IAAIG,KAAK,CAAC,2BAA2BK,MAAM,GAAG,CAAC;EACvD;EAEA,OAAOf,QAAQ,CAACS,IAAI,CAAC,CAAC;AACxB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}