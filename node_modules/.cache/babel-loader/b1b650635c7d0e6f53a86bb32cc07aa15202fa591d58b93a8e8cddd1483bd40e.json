{"ast":null,"code":"const BACKEND_URL=process.env.REACT_APP_BACKEND_URL;export async function generateQuiz(url){const res=await fetch(\"\".concat(BACKEND_URL,\"/generate_quiz\"),{method:\"POST\",headers:{\"Content-Type\":\"application/json\"},body:JSON.stringify({url})});if(!res.ok){let errorMessage=\"HTTP error! Status: \".concat(res.status);try{errorMessage=(await res.json()).detail||errorMessage;}catch(_unused){}throw new Error(errorMessage);}return res.json();}export async function getQuizHistory(){const res=await fetch(\"\".concat(BACKEND_URL,\"/history\"));if(!res.ok)throw new Error(\"Failed to fetch history: \".concat(res.status));return res.json();}export async function getSingleQuiz(id){const res=await fetch(\"\".concat(BACKEND_URL,\"/quiz/\").concat(id));if(!res.ok)throw new Error(\"Failed to fetch quiz ID \".concat(id));return res.json();}","map":{"version":3,"names":["BACKEND_URL","process","env","REACT_APP_BACKEND_URL","generateQuiz","url","res","fetch","concat","method","headers","body","JSON","stringify","ok","errorMessage","status","json","detail","_unused","Error","getQuizHistory","getSingleQuiz","id"],"sources":["C:/Users/nandu/ai-quiz-generator/frontend/src/services/api.js"],"sourcesContent":["const BACKEND_URL = process.env.REACT_APP_BACKEND_URL;\r\n\r\nexport async function generateQuiz(url) {\r\n  const res = await fetch(`${BACKEND_URL}/generate_quiz`, {\r\n    method: \"POST\",\r\n    headers: { \"Content-Type\": \"application/json\" },\r\n    body: JSON.stringify({ url }),\r\n  });\r\n  if (!res.ok) {\r\n    let errorMessage = `HTTP error! Status: ${res.status}`;\r\n    try { errorMessage = (await res.json()).detail || errorMessage; } catch {}\r\n    throw new Error(errorMessage);\r\n  }\r\n  return res.json();\r\n}\r\n\r\nexport async function getQuizHistory() {\r\n  const res = await fetch(`${BACKEND_URL}/history`);\r\n  if (!res.ok) throw new Error(`Failed to fetch history: ${res.status}`);\r\n  return res.json();\r\n}\r\n\r\nexport async function getSingleQuiz(id) {\r\n  const res = await fetch(`${BACKEND_URL}/quiz/${id}`);\r\n  if (!res.ok) throw new Error(`Failed to fetch quiz ID ${id}`);\r\n  return res.json();\r\n}\r\n"],"mappings":"AAAA,KAAM,CAAAA,WAAW,CAAGC,OAAO,CAACC,GAAG,CAACC,qBAAqB,CAErD,MAAO,eAAe,CAAAC,YAAYA,CAACC,GAAG,CAAE,CACtC,KAAM,CAAAC,GAAG,CAAG,KAAM,CAAAC,KAAK,IAAAC,MAAA,CAAIR,WAAW,mBAAkB,CACtDS,MAAM,CAAE,MAAM,CACdC,OAAO,CAAE,CAAE,cAAc,CAAE,kBAAmB,CAAC,CAC/CC,IAAI,CAAEC,IAAI,CAACC,SAAS,CAAC,CAAER,GAAI,CAAC,CAC9B,CAAC,CAAC,CACF,GAAI,CAACC,GAAG,CAACQ,EAAE,CAAE,CACX,GAAI,CAAAC,YAAY,wBAAAP,MAAA,CAA0BF,GAAG,CAACU,MAAM,CAAE,CACtD,GAAI,CAAED,YAAY,CAAG,CAAC,KAAM,CAAAT,GAAG,CAACW,IAAI,CAAC,CAAC,EAAEC,MAAM,EAAIH,YAAY,CAAE,CAAE,MAAAI,OAAA,CAAM,CAAC,CACzE,KAAM,IAAI,CAAAC,KAAK,CAACL,YAAY,CAAC,CAC/B,CACA,MAAO,CAAAT,GAAG,CAACW,IAAI,CAAC,CAAC,CACnB,CAEA,MAAO,eAAe,CAAAI,cAAcA,CAAA,CAAG,CACrC,KAAM,CAAAf,GAAG,CAAG,KAAM,CAAAC,KAAK,IAAAC,MAAA,CAAIR,WAAW,YAAU,CAAC,CACjD,GAAI,CAACM,GAAG,CAACQ,EAAE,CAAE,KAAM,IAAI,CAAAM,KAAK,6BAAAZ,MAAA,CAA6BF,GAAG,CAACU,MAAM,CAAE,CAAC,CACtE,MAAO,CAAAV,GAAG,CAACW,IAAI,CAAC,CAAC,CACnB,CAEA,MAAO,eAAe,CAAAK,aAAaA,CAACC,EAAE,CAAE,CACtC,KAAM,CAAAjB,GAAG,CAAG,KAAM,CAAAC,KAAK,IAAAC,MAAA,CAAIR,WAAW,WAAAQ,MAAA,CAASe,EAAE,CAAE,CAAC,CACpD,GAAI,CAACjB,GAAG,CAACQ,EAAE,CAAE,KAAM,IAAI,CAAAM,KAAK,4BAAAZ,MAAA,CAA4Be,EAAE,CAAE,CAAC,CAC7D,MAAO,CAAAjB,GAAG,CAACW,IAAI,CAAC,CAAC,CACnB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}