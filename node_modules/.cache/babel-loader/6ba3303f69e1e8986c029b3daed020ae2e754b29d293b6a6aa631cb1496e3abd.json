{"ast":null,"code":"// frontend/src/services/api.js\nconst BACKEND_URL='http://localhost:8000';/**\r\n * Calls the FastAPI endpoint to generate a new quiz from a Wikipedia URL.\r\n */export async function generateQuiz(url){const response=await fetch(\"\".concat(BACKEND_URL,\"/generate_quiz\"),{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({url})});if(!response.ok){const errorData=await response.json();throw new Error(errorData.detail||\"HTTP error! Status: \".concat(response.status));}return response.json();}/**\r\n * Calls the FastAPI endpoint to get the list of saved quizzes.\r\n */export async function getQuizHistory(){const response=await fetch(\"\".concat(BACKEND_URL,\"/history\"));if(!response.ok){throw new Error(\"Failed to fetch history: \".concat(response.status));}return response.json();}/**\r\n * Calls the FastAPI endpoint to fetch a single quiz by ID.\r\n */export async function getSingleQuiz(quizId){const response=await fetch(\"\".concat(BACKEND_URL,\"/quiz/\").concat(quizId));if(!response.ok){throw new Error(\"Failed to fetch quiz ID \".concat(quizId,\".\"));}return response.json();}","map":{"version":3,"names":["BACKEND_URL","generateQuiz","url","response","fetch","concat","method","headers","body","JSON","stringify","ok","errorData","json","Error","detail","status","getQuizHistory","getSingleQuiz","quizId"],"sources":["C:/Users/nandu/ai-quiz-generator/frontend/src/services/api.js"],"sourcesContent":["// frontend/src/services/api.js\r\nconst BACKEND_URL = 'http://localhost:8000';\r\n\r\n/**\r\n * Calls the FastAPI endpoint to generate a new quiz from a Wikipedia URL.\r\n */\r\nexport async function generateQuiz(url) {\r\n  const response = await fetch(`${BACKEND_URL}/generate_quiz`, {\r\n    method: 'POST',\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n    },\r\n    body: JSON.stringify({ url }),\r\n  });\r\n\r\n  if (!response.ok) {\r\n    const errorData = await response.json();\r\n    throw new Error(errorData.detail || `HTTP error! Status: ${response.status}`);\r\n  }\r\n\r\n  return response.json();\r\n}\r\n\r\n/**\r\n * Calls the FastAPI endpoint to get the list of saved quizzes.\r\n */\r\nexport async function getQuizHistory() {\r\n  const response = await fetch(`${BACKEND_URL}/history`);\r\n\r\n  if (!response.ok) {\r\n    throw new Error(`Failed to fetch history: ${response.status}`);\r\n  }\r\n\r\n  return response.json();\r\n}\r\n\r\n/**\r\n * Calls the FastAPI endpoint to fetch a single quiz by ID.\r\n */\r\nexport async function getSingleQuiz(quizId) {\r\n  const response = await fetch(`${BACKEND_URL}/quiz/${quizId}`);\r\n\r\n  if (!response.ok) {\r\n    throw new Error(`Failed to fetch quiz ID ${quizId}.`);\r\n  }\r\n\r\n  return response.json();\r\n}"],"mappings":"AAAA;AACA,KAAM,CAAAA,WAAW,CAAG,uBAAuB,CAE3C;AACA;AACA,GACA,MAAO,eAAe,CAAAC,YAAYA,CAACC,GAAG,CAAE,CACtC,KAAM,CAAAC,QAAQ,CAAG,KAAM,CAAAC,KAAK,IAAAC,MAAA,CAAIL,WAAW,mBAAkB,CAC3DM,MAAM,CAAE,MAAM,CACdC,OAAO,CAAE,CACP,cAAc,CAAE,kBAClB,CAAC,CACDC,IAAI,CAAEC,IAAI,CAACC,SAAS,CAAC,CAAER,GAAI,CAAC,CAC9B,CAAC,CAAC,CAEF,GAAI,CAACC,QAAQ,CAACQ,EAAE,CAAE,CAChB,KAAM,CAAAC,SAAS,CAAG,KAAM,CAAAT,QAAQ,CAACU,IAAI,CAAC,CAAC,CACvC,KAAM,IAAI,CAAAC,KAAK,CAACF,SAAS,CAACG,MAAM,yBAAAV,MAAA,CAA2BF,QAAQ,CAACa,MAAM,CAAE,CAAC,CAC/E,CAEA,MAAO,CAAAb,QAAQ,CAACU,IAAI,CAAC,CAAC,CACxB,CAEA;AACA;AACA,GACA,MAAO,eAAe,CAAAI,cAAcA,CAAA,CAAG,CACrC,KAAM,CAAAd,QAAQ,CAAG,KAAM,CAAAC,KAAK,IAAAC,MAAA,CAAIL,WAAW,YAAU,CAAC,CAEtD,GAAI,CAACG,QAAQ,CAACQ,EAAE,CAAE,CAChB,KAAM,IAAI,CAAAG,KAAK,6BAAAT,MAAA,CAA6BF,QAAQ,CAACa,MAAM,CAAE,CAAC,CAChE,CAEA,MAAO,CAAAb,QAAQ,CAACU,IAAI,CAAC,CAAC,CACxB,CAEA;AACA;AACA,GACA,MAAO,eAAe,CAAAK,aAAaA,CAACC,MAAM,CAAE,CAC1C,KAAM,CAAAhB,QAAQ,CAAG,KAAM,CAAAC,KAAK,IAAAC,MAAA,CAAIL,WAAW,WAAAK,MAAA,CAASc,MAAM,CAAE,CAAC,CAE7D,GAAI,CAAChB,QAAQ,CAACQ,EAAE,CAAE,CAChB,KAAM,IAAI,CAAAG,KAAK,4BAAAT,MAAA,CAA4Bc,MAAM,KAAG,CAAC,CACvD,CAEA,MAAO,CAAAhB,QAAQ,CAACU,IAAI,CAAC,CAAC,CACxB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}